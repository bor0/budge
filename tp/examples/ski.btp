# SKI formal system, as per https://en.wikipedia.org/wiki/SKI_combinator_calculus

# Definitions

## SKI base terms
rTmS : S
rTmK : K
rTmI : I
rTm( : (
rTm) : )
rTmE : E
tmS! : rTmS
tmK! : rTmK
tmI! : rTmI
tm(! : rTm(
tm)! : rTm)
tmE! : rTmE

## SKI term construction rules
rWd : xy   # Words over S K I ( )
rTm : (xy) # Terms

## SKI derivation rules
### Epsilon (empty) value
rEpsElimL : ⊢Ex => ⊢x
rEpsElimR : ⊢xE => ⊢x
rEpsIntroL : ⊢x => ⊢Ex
rEpsIntroR : ⊢x => ⊢xE
### I combinator
rId : ⊢d(Ix)b => ⊢dxb # d, b words x term
### K combinator, corresponds to Hilbert's r1
rConst : ⊢d((Kx)y)b => ⊢dxb # d, b words x, y terms
### S combinator, corresponds to Hilbert's r2
rSubst : ⊢d(((Sx)y)z)b => ⊢d((xz)(yz))b # d, b words x, y, z terms

## Modus ponens
rMp : ⊢p -> ⊢(p => q) -> ⊢q
## Hypothetical syllogism
### TODO: This can probably be proved on its own using the previous rules.
### See hilbert.btp `thm2` which uses r1 and r2 which correspond to K and S.
rHs : ⊢a => ⊢b -> ⊢b => ⊢c -> ⊢a => ⊢c

## Meta vars
ra : a
rb : b
rc : c
rp : p
rq : q
rr : r
rx : x
ry : y
rz : z
tma! : ra
tmb! : rb
tmc! : rc
tmp! : rp
tmq! : rq
tmr! : rr
tmx! : rx
tmy! : ry
tmz! : rz

# 1. Proof that ⊢(I (I (((S K) S) K))) => ⊢K
## Terms needed for the proof
tm(SK)! : rTm x=tmS!;y=tmK!
tm((SK)S)! : rTm x=tm(SK)!;y=tmS!
tm(((SK)S)K)! : rTm x=tm((SK)S)!;y=tmK!
tm(I(((SK)S)K))! : rTm x=tmI!;y=tm(((SK)S)K)!
tm(I(I(((SK)S)K)))! : rTm x=tmI!;y=tm(I(((SK)S)K))!
tm(KK)! : rTm x=tmK!;y=tmK!
tm((KK)(SK))! : rTm x=tm(KK)!;y=tm(SK)!
tmE(I(I(((SK)S)K)))! : rWd x=tmE!;y=tm(I(I(((SK)S)K)))!
tmE(I(I(((SK)S)K)))E! : rWd x=tmE(I(I(((SK)S)K)))!;y=tmE!
tmE(I(((SK)S)K))! : rWd x=tmE!;y=tm(I(((SK)S)K))!
tmE(I(((SK)S)K))E! : rWd x=tmE(I(((SK)S)K))!;y=tmE!
tmE(((SK)S)K)! : rWd x=tmE!;y=tm(((SK)S)K)!
tmE(((SK)S)K)E! : rWd x=tmE(((SK)S)K)!;y=tmE!
tmE((KK)(SK))! : rWd x=tmE!;y=tm((KK)(SK))!
tmE((KK)(SK))E! : rWd x=tmE((KK)(SK))!;y=tmE!
tmKE! : rWd x=tmK!;y=tmE!
tmEK! : rWd x=tmE!;y=tmK!
tmEKE! : rWd x=tmEK!;y=tmE!

## Lemmas
th=>EgTerm! : rId d=tmE!;x=tm(I(((SK)S)K))!;b=tmE!
th=>(((SK)S)K)! : rId d=tmE!;x=tm(((SK)S)K)!;b=tmE!
th=>KK(SK)! : rSubst d=tmE!;x=tmK!;y=tmS!;z=tmK!;b=tmE!
th=>K! : rConst d=tmE!;x=tmK!;y=tm(SK)!;b=tmE!

## Proof
thKstep1! : rHs a=tmE(I(I(((SK)S)K)))E!;b=tmE(I(((SK)S)K))E!;c=tmE(((SK)S)K)E! th=>EgTerm! th=>(((SK)S)K)!
thKstep2! : rHs a=tmE(I(I(((SK)S)K)))E!;b=tmE(((SK)S)K)E!;c=tmE((KK)(SK))E! thKstep1! th=>KK(SK)!
thKstep3! : rHs a=tmE(I(I(((SK)S)K)))E!;b=tmE((KK)(SK))E!;c=tmEKE! thKstep2! th=>K!
thKstep4! : rEpsElimL x=tmKE!
thKstep5! : rHs a=tmE(I(I(((SK)S)K)))E!;b=tmEKE!;c=tmKE! thKstep3! thKstep4!
thKstep6! : rEpsElimR x=tmK!
thKstep7! : rHs a=tmE(I(I(((SK)S)K)))E!;b=tmKE!;c=tmK! thKstep5! thKstep6!
thKstep8! : rEpsIntroL x=tm(I(I(((SK)S)K)))!
thKstep9! : rEpsIntroR x=tmE(I(I(((SK)S)K)))!
thKstep10! : rHs a=tmE(I(I(((SK)S)K)))!;b=tmE(I(I(((SK)S)K)))E!;c=tmK! thKstep9! thKstep7!
thK : rHs a=tm(I(I(((SK)S)K)))!;b=tmE(I(I(((SK)S)K)))!;c=tmK! thKstep8! thKstep10!

# 2. Recursion: Proof that ⊢(((S I) I) a) => ⊢(a a)
## Terms needed for the proof
tm(Ip)! : rTm x=tmI!;y=tmp!
tm(SI)! : rTm x=tmS!;y=tmI!
tm((SI)I)! : rTm x=tm(SI)!;y=tmI!
tm(((SI)I)p)! : rTm x=tm((SI)I)!;y=tmp!
tm((Ip)(Ip))! : rTm x=tm(Ip)!;y=tm(Ip)!
tm((Ip)p)! : rTm x=tm(Ip)!;y=tmp!
tm(pp)! : rTm x=tmp!;y=tmp!
tm((Ip)! : rWd x=tm(!;y=tm(Ip)!
tmE((Ip)! : rWd x=tmE!;y=tm((Ip)!
tm)E! : rWd x=tm)!;y=tmE!
tmE(! : rWd x=tmE!;y=tm(!
tmp)E! : rWd x=tmp!;y=tm)E!
tmE(((SI)I)p)! : rWd x=tmE!;y=tm(((SI)I)p)!
tmE(((SI)I)p)E! : rWd x=tmE(((SI)I)p)!;y=tmE!
tmE((Ip)(Ip))! : rWd x=tmE!;y=tm((Ip)(Ip))!
tmE((Ip)(Ip))E! : rWd x=tmE((Ip)(Ip))!;y=tmE!
tmE((Ip)p)! : rWd x=tmE!;y=tm((Ip)p)!
tmE((Ip)p)E! : rWd x=tmE((Ip)p)!;y=tmE!
tmE(pp)! : rWd x=tmE!;y=tm(pp)!
tm(pp)E! : rWd x=tm(pp)!;y=tmE!
tmE(pp)E! : rWd x=tmE(pp)!;y=tmE!

## Proof
thRecstep1! : rSubst d=tmE!;x=tmI!;y=tmI!;z=tmp!;b=tmE!
thRecstep2! : rId d=tmE((Ip)!;x=tmp!;b=tm)E!
thRecstep3! : rId d=tmE(!;x=tmp!;b=tmp)E!
thRecstep4! : rHs a=tmE(((SI)I)p)E!;b=tmE((Ip)(Ip))E!;c=tmE((Ip)p)E! thRecstep1! thRecstep2!
thRecstep5! : rHs a=tmE(((SI)I)p)E!;b=tmE((Ip)p)E!;c=tmE(pp)E! thRecstep4! thRecstep3!
thRecstep6! : rEpsElimL x=tm(pp)E!
thRecstep7! : rEpsElimR x=tm(pp)!
thRecstep8! : rHs a=tmE(((SI)I)p)E!;b=tmE(pp)E!;c=tm(pp)E! thRecstep5! thRecstep6!
thRecstep9! : rHs a=tmE(((SI)I)p)E!;b=tm(pp)E!;c=tm(pp)! thRecstep8! thRecstep7!
thRecstep10! : rEpsIntroL x=tm(((SI)I)p)!
thRecstep11! : rEpsIntroR x=tmE(((SI)I)p)!
thRecstep12! : rHs a=tmE(((SI)I)p)!;b=tmE(((SI)I)p)E!;c=tm(pp)! thRecstep11! thRecstep9!
thRec : rHs a=tm(((SI)I)p)!;b=tmE(((SI)I)p)!;c=tm(pp)!;p=tma! thRecstep10! thRecstep12!

# 3. Proof that SK = I
## Terms needed for the proof
tm((SK)p)! : rTm x=tm(SK)!;y=tmp!
tm(((SK)p)q)! : rTm x=tm((SK)p)!;y=tmq!
tm(((SK)y)z)! : tm(((SK)p)q)! x=tm(((SK)p)q)!;p=tmy!;q=tmz!
tm(((SK)y)z)E! : rWd x=tm(((SK)p)q)!;y=tmE!;p=tmy!;q=tmz!
tmE(((SK)y)z)E! : rWd x=tmE!;y=tm(((SK)y)z)E!
tm(yz)! : rTm y=tmz!;x=tmy!
tm(pz)! : rTm x=tmp!;y=tmz!
tm(Kz)! : rTm x=tmK!;y=tmz!
tm((Kz)(yz))! : rTm x=tm(Kz)!;y=tm(pz)!
tm((Kz)(pz))E! : rWd x=tm((Kz)(yz))!;y=tmE!
tmE((Kz)(yz))E! : rWd x=tmE!;y=tm((Kz)(pz))E!;p=tmy!
tmzE! : rWd x=tmz!;y=tmE!
tmEzE! : rWd x=tmE!;y=tmzE!

## Proof
thIdStep1! : rSubst d=tmE!;x=tmK!;b=tmE!
thIdStep2! : rConst d=tmE!;x=tmz!;y=tm(yz)!;b=tmE!
thIdStep3! : rEpsIntroL x=tm(((SK)y)z)E!
thIdStep4! : rHs a=tmE(((SK)y)z)E!;b=tmE((Kz)(yz))E!;c=tmEzE! thIdStep1! thIdStep2!
thIdStep5! : rHs a=tm(((SK)y)z)E!;b=tmE(((SK)y)z)E!;c=tmEzE! thIdStep3! thIdStep4!
thIdStep6! : rEpsIntroR x=tm(((SK)y)z)!
thIdStep7! : rHs a=tm(((SK)y)z)!;b=tm(((SK)y)z)E!;c=tmEzE! thIdStep6! thIdStep5!
thIdStep8! : rEpsElimL x=tmzE!
thIdStep9! : rHs a=tm(((SK)y)z)!;b=tmEzE!;c=tmzE! thIdStep7! thIdStep8!
thIdStep10! : rEpsElimR x=tmz!
thId : rHs a=tm(((SK)y)z)!;b=tmzE!;c=tmz! thIdStep9! thIdStep10!
